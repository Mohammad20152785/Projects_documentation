import pandas as pd
from mlxtend.preprocessing import TransactionEncoder

dataset = [["Milk", "Onion", "Nutmeg", "Kidney Beans", "Eggs", "Yogurt"],
           ["Dill", "Onion", "Nutmeg", "Kidney Beans", "Eggs",  "Yogurt"],
           ["Milk", "Apple", "Kidney Beans", "Eggs"],
           ["Milk", "Unicorn",  "Corn", "Kidney Beans", "Yogurt"],
           ["Corn", "Onion", "Onion", "Kidney Beans", "Ice cream", "Eggs"]]
           
           Using and TransactionEncoder object, we can transform this dataset into an array format suitable for typical machine learning APIs. Via the fit method,
           the TransactionEncoder learns the unique labels in the dataset, and via the transform method, it transforms the input dataset (a Python list of lists) 
           into encoded NumPy boolean array:
           
te = TransactionEncoder()
te_arr = te.fit(dataset).transform(dataset)
df = pd.DataFrame(te_arr, columns=te.columns_)
df


Apple	Corn	Dill	Eggs	Ice cream	Kidney Beans	Milk	Nutmeg	Onion	Unicorn	Yogurt
0	False	False	False	True	False	True	True	True	True	False	True
1	False	False	True	True	False	True	False	True	True	False	True
2	True	False	False	True	False	True	True	False	False	False	False
3	False	True	False	False	False	True	True	False	False	True	True
4	False	True	False	True	True	True	False	False	True	False	False

from mlxtend.frequent_patterns import apriori 
frequent_itemsets  = apriori(df, min_support = 0.6, use_colnames = True)
frequent_itemsets

	support	itemsets
0	0.8	(Eggs)
1	1.0	(Kidney Beans)
2	0.6	(Milk)
3	0.6	(Onion)
4	0.6	(Yogurt)
5	0.8	(Kidney Beans, Eggs)
6	0.6	(Onion, Eggs)
7	0.6	(Milk, Kidney Beans)
8	0.6	(Kidney Beans, Onion)
9	0.6	(Yogurt, Kidney Beans)
10	0.6	(Kidney Beans, Onion, Eggs)



#association Rule Mining
from mlxtend.frequent_patterns import association_rules
#frequent itemsets only if the level of confidence is above the 70 percent threshold
res = association_rules(frequent_itemsets, metric = "confidence", min_threshold =0.7)
res



	antecedents	consequents	antecedent support	consequent support	support	confidence	lift	leverage	conviction
0	(Kidney Beans)	(Eggs)	1.0	0.8	0.8	0.80	1.00	0.00	1.0
1	(Eggs)	(Kidney Beans)	0.8	1.0	0.8	1.00	1.00	0.00	inf
2	(Onion)	(Eggs)	0.6	0.8	0.6	1.00	1.25	0.12	inf
3	(Eggs)	(Onion)	0.8	0.6	0.6	0.75	1.25	0.12	1.6
4	(Milk)	(Kidney Beans)	0.6	1.0	0.6	1.00	1.00	0.00	inf
5	(Onion)	(Kidney Beans)	0.6	1.0	0.6	1.00	1.00	0.00	inf
6	(Yogurt)	(Kidney Beans)	0.6	1.0	0.6	1.00	1.00	0.00	inf
7	(Kidney Beans, Onion)	(Eggs)	0.6	0.8	0.6	1.00	1.25	0.12	inf
8	(Kidney Beans, Eggs)	(Onion)	0.8	0.6	0.6	0.75	1.25	0.12	1.6
9	(Onion, Eggs)	(Kidney Beans)	0.6	1.0	0.6	1.00	1.00	0.00	inf
10	(Onion)	(Kidney Beans, Eggs)	0.6	0.8	0.6	1.00	1.25	0.12	inf
11	(Eggs)	(Kidney Beans, Onion)	0.8	0.6	0.6	0.75	1.25	0.12	1.6


res1 = res[["antecedents", "consequents", "support", "confidence", "lift"]]
res1

	antecedents	consequents	support	confidence	lift
0	(Kidney Beans)	(Eggs)	0.8	0.80	1.00
1	(Eggs)	(Kidney Beans)	0.8	1.00	1.00
2	(Onion)	(Eggs)	0.6	1.00	1.25
3	(Eggs)	(Onion)	0.6	0.75	1.25
4	(Milk)	(Kidney Beans)	0.6	1.00	1.00
5	(Onion)	(Kidney Beans)	0.6	1.00	1.00
6	(Yogurt)	(Kidney Beans)	0.6	1.00	1.00
7	(Kidney Beans, Onion)	(Eggs)	0.6	1.00	1.25
8	(Kidney Beans, Eggs)	(Onion)	0.6	0.75	1.25
9	(Onion, Eggs)	(Kidney Beans)	0.6	1.00	1.00
10	(Onion)	(Kidney Beans, Eggs)	0.6	1.00	1.25
11	(Eggs)	(Kidney Beans, Onion)	0.6	0.75	1.25


res2 =res1[res1["confidence"]>= 1]
res2
